% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/solid_spherical3d.R
\name{solid_spherical3d}
\alias{solid_spherical3d}
\title{Solid in spherical coordinates with Plotly visualization (+ volume)}
\usage{
solid_spherical3d(
  R1,
  R2,
  theta_range = c(0, 2 * pi),
  phi_range = c(0, pi),
  n_theta = 160,
  n_phi = 120,
  plot = TRUE,
  show_surfaces = c(TRUE, TRUE),
  colorscales = list("Blues", "Reds"),
  opacities = c(0.3, 0.35),
  show_surface_grid = TRUE,
  surface_grid_color = "rgba(60,80,200,0.25)",
  surface_grid_width = 1,
  scene = list(aspectmode = "data", xaxis = list(title = "x"), yaxis = list(title = "y"),
    zaxis = list(title = "z")),
  bg = list(paper = "white", plot = "white"),
  compute_volume = FALSE,
  vol_method = c("adaptive", "grid"),
  n_th_vol = 600,
  n_ph_vol = 400
)
}
\arguments{
\item{R1, R2}{Functions \code{function(theta, phi)} giving the inner/outer radius (numeric scalars).}

\item{theta_range}{Length-2 numeric \code{c(theta_min, theta_max)} (radians).}

\item{phi_range}{Length-2 numeric \code{c(phi_min, phi_max)} (radians).}

\item{n_theta, n_phi}{Mesh resolution for the two boundary surfaces (each surface is \eqn{n_\phi \times n_\theta}).}

\item{plot}{Logical. If \code{TRUE}, draw with \pkg{plotly}.}

\item{show_surfaces}{Which surfaces to show: vector of two booleans for \code{c(r=R1, r=R2)}.}

\item{colorscales}{Colorscales for the two surfaces. Either a single Plotly colorscale
string/color/vector (applied to both) or a length-2 list (one per surface).
You may use a single flat color (e.g., \code{"#2a9d8f"} or \code{"rgba(0,0,0,0.6)"}).}

\item{opacities}{Opacity for the two surfaces (length 1 or 2).}

\item{show_surface_grid}{Logical. Draw grid on surfaces.}

\item{surface_grid_color, surface_grid_width}{Grid aesthetics.}

\item{scene}{Plotly 3D scene (defaults to \code{aspectmode="data"} with axis titles).}

\item{bg}{Background colors list: \code{list(paper="white", plot="white")}.}

\item{compute_volume}{Logical. If \code{TRUE}, compute the triple integral volume.}

\item{vol_method}{Either \code{"adaptive"} (nested \code{stats::integrate}) or
\code{"grid"} (regular trapezoidal rule).}

\item{n_th_vol, n_ph_vol}{Resolution for the grid method (ignored for "adaptive").}
}
\value{
A list with:
\itemize{
\item \code{theta_seq}, \code{phi_seq}: parameter sequences used for plotting.
\item \code{R1_surf}, \code{R2_surf}: lists with \code{X,Y,Z} matrices for the two boundary surfaces (or \code{NULL} if hidden).
\item \code{fig}: a \pkg{plotly} figure if \code{plot=TRUE}, otherwise \code{NULL}.
\item \code{volume}: \code{NULL} or a list with \code{estimate}, \code{method}, and metadata.
}
}
\description{
Draws the solid defined in spherical coordinates by
\deqn{r \in [R_1(\theta,\phi),\, R_2(\theta,\phi)],\quad
      \theta \in [\theta_{\min},\theta_{\max}],\quad
      \phi \in [\phi_{\min},\phi_{\max}]}
using the standard convention:
\eqn{\theta} = azimuth (in the xy-plane), \eqn{\phi} = polar angle from +z axis.
}
\details{
Optionally computes the volume via
\deqn{V = \int_{\theta}\int_{\phi}\int_{r} r^2 \sin\phi \,dr\,d\phi\,d\theta
     = \int_{\theta}\int_{\phi} \tfrac{1}{3}\Big(R_2^3 - R_1^3\Big)\sin\phi \, d\phi \, d\theta.}
}
\examples{
\dontshow{if (interactive()) \{}
# Example 1: Spherical shell: a <= r <= b (independent of angles)
R1 <- function(th, ph) 0.8
R2 <- function(th, ph) 1.2
out <- solid_spherical3d(
  R1, R2,
  theta_range = c(0, 2*pi),
  phi_range   = c(0, pi),
  plot = TRUE,
  colorscales = list("Blues", "Reds"),
  opacities   = c(0.25, 0.35),
  compute_volume = TRUE
)
out$volume$estimate       # ~ 4/3*pi*(1.2^3 - 0.8^3)

# Example 2: Spherical cap: 0 <= r <= 1, phi in [0, pi/3]
R1 <- function(th, ph) 0
R2 <- function(th, ph) 1
out2 <- solid_spherical3d(
  R1, R2,
  theta_range = c(0, 2*pi),
  phi_range   = c(0, pi/3),
  plot = TRUE,
  compute_volume = TRUE
)
out2$volume$estimate      # analytic: (2/3)*pi*(1 - cos(pi/3))*(1 + cos(pi/3) + cos(pi/3)^2)
\dontshow{\}}

}
