% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/solid_xyz3d.R
\name{solid_xyz3d}
\alias{solid_xyz3d}
\title{Solid \eqn{(x,y,z)} with \eqn{y \in [H_1(x), H_2(x)]} and \eqn{z \in [G_1(x,y), G_2(x,y)]}}
\usage{
solid_xyz3d(
  H1,
  H2,
  G1,
  G2,
  a,
  b,
  plot = TRUE,
  n_x = 120,
  n_u = 60,
  n_v = 60,
  mode = c("faces", "wireframe", "both"),
  show_faces = c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE),
  colorscales = c("Blues", "Blues", "Greens", "Greens", "Reds", "Reds"),
  opacities = 0.35,
  show_surface_grid = TRUE,
  surface_grid_color = "rgba(60,80,200,0.25)",
  surface_grid_width = 1,
  show_edges = TRUE,
  edge_line = list(color = "black", width = 2),
  wire_step = 6,
  wire_line = list(color = "black", width = 1),
  scene = list(aspectmode = "data", xaxis = list(title = "x"), yaxis = list(title = "y"),
    zaxis = list(title = "z")),
  bg = list(paper = "white", plot = "white"),
  compute_volume = FALSE,
  vol_method = c("adaptive", "grid"),
  nx_vol = 300,
  ny_vol = 300,
  slice = list(x = NULL, y = NULL, z = NULL),
  slice_mode = c("surface", "wireframe", "both"),
  slice_nx = 200,
  slice_nu = 120,
  slice_nv = 120,
  slice_colorscales = list(x = "Oranges", y = "Purples", z = "Greens"),
  slice_opacity = 0.55,
  slice_show_grid = TRUE,
  slice_grid_color = "rgba(80,80,80,0.25)",
  slice_grid_width = 1,
  slice_wire_step = 8,
  slice_wire_line = list(color = "black", width = 2, dash = "dot")
)
}
\arguments{
\item{H1, H2}{\code{function(x)} giving the lower/upper bounds in \eqn{y}.}

\item{G1, G2}{\code{function(x,y)} giving the lower/upper bounds in \eqn{z}.}

\item{a, b}{Interval endpoints in \eqn{x} with \code{b > a}.}

\item{plot}{Logical. If \code{TRUE}, draw with \pkg{plotly}.}

\item{n_x, n_u, n_v}{Mesh resolution for the six faces (in \eqn{x}, \eqn{u}, \eqn{v}).}

\item{mode}{\code{"faces"}, \code{"wireframe"} or \code{"both"}.}

\item{show_faces}{Logical vector of length 6 indicating which faces to show,
in the order \code{c("x=a","x=b","y=H1","y=H2","z=G1","z=G2")}.}

\item{colorscales}{Color scales for faces. Accepts:
\itemize{
\item A single Plotly scale name (e.g. \code{"Blues"}, \code{"Viridis"}) → applied to all faces.
\item A single flat color (R name, \code{"#RRGGBB"}, \code{"rgba(...)"}) → flat scale.
\item A color vector \code{c("white","#2a9d8f",...)} → evenly spaced gradient for all faces.
\item A vector/list of 6 scales (one per face) in any of the formats above.
}}

\item{opacities}{Opacities for faces (length 1 or 6).}

\item{show_surface_grid}{Logical. Draws a grid over surfaces.}

\item{surface_grid_color, surface_grid_width}{Grid style for surfaces.}

\item{show_edges}{Logical. Draw edges of each face.}

\item{edge_line}{Edge style (\code{list(color, width, dash)}).}

\item{wire_step}{Integer \eqn{\ge 1}: draw every \code{wire_step}-th mesh line in wireframe mode.}

\item{wire_line}{Wireframe line style (\code{list(color, width, dash)}).}

\item{scene}{3D scene options (default \code{aspectmode="data"}).}

\item{bg}{Background colors: \code{list(paper="white", plot="white")}.}

\item{compute_volume}{Logical. If \code{TRUE}, estimates \eqn{\int_a^b \int_{H_1}^{H_2} (G_2-G_1)\,dy\,dx}.}

\item{vol_method}{Volume integration method: \code{"adaptive"} (nested \code{stats::integrate})
or \code{"grid"} (trapezoidal rule on a regular grid).}

\item{nx_vol, ny_vol}{Grid sizes for \code{vol_method="grid"}.}

\item{slice}{List of slices: \code{slice = list(x = NULL, y = NULL, z = NULL)}. Each entry
can be a number or numeric vector.}

\item{slice_mode}{Slice rendering mode: \code{"surface"}, \code{"wireframe"} or \code{"both"}.}

\item{slice_nx, slice_nu, slice_nv}{Mesh resolution for slices (\eqn{x}: \code{nu×nv}, \eqn{y}: \code{nx×nv}, \eqn{z}: \code{nx×nu}).}

\item{slice_colorscales}{Color scales for slices: \code{list(x=, y=, z=)} in the same formats as \code{colorscales}.}

\item{slice_opacity}{Opacity for slices (0–1).}

\item{slice_show_grid, slice_grid_color, slice_grid_width}{Grid options for slices.}

\item{slice_wire_step, slice_wire_line}{Wireframe step and style for slices.}
}
\value{
A list with:
\itemize{
\item \code{x_seq}, \code{u_seq}, \code{v_seq}: the parameter sequences used,
\item \code{fig}: \pkg{plotly} object if \code{plot=TRUE}, otherwise \code{NULL},
\item \code{volume}: \code{NULL} or a list with \code{estimate} and metadata if \code{compute_volume=TRUE}.
}
}
\description{
Builds and (optionally) renders with \pkg{plotly} the solid
\deqn{\{(x,y,z):\ x\in[a,b],\ y\in[H_1(x),H_2(x)],\ z\in[G_1(x,y),G_2(x,y)]\}}
using a curvilinear-prism parametrization. It supports:
\itemize{
\item \strong{Display modes}: \code{mode = "faces" | "wireframe" | "both"}.
\item \strong{Numerical volume}: \code{compute_volume = TRUE} with \code{vol_method = "adaptive"|"grid"}.
\item \strong{Internal slices} on planes \eqn{x=x_0}, \eqn{y=y_0}, \eqn{z=z_0}.
\item \strong{Flexible colors}: flat colors (R names, \code{"#RRGGBB"}, \code{"rgba(...)"});
color vectors (gradients); or Plotly color scales (e.g. \code{"Viridis"}).
You can pass 1 or 6 scales for the six faces.
}
}
\details{
\strong{About color scales}: Each \emph{colorscale} can be
\enumerate{
\item A Plotly scale name (\code{"Blues"}, \code{"Viridis"}, …),
\item A single color (R name, \code{"#RRGGBB"}, \code{"rgba(r,g,b,a)"}),
\item A color vector (\code{c("white","#2a9d8f",...)}) → evenly spaced gradient,
\item A ready Plotly list (pairs \code{list(list(pos,color), ...)}).
}
If \code{colorscales} has length 1 (or is a color vector), it is applied to all faces.
}
\examples{
\dontshow{if (interactive()) \{}
H1 <- function(x) -1 - x
H2 <- function(x)  1 - x^2
G1 <- function(x,y) y
G2 <- function(x,y) y + 1

# Six flat face colors
solid_xyz3d(
  H1,H2,G1,G2, a=-1, b=1, plot=TRUE, mode="faces",
  colorscales = c("#b3cde0","#ccebc5","#decbe4","#fed9a6","#ffffcc","#fbb4ae"),
  opacities   = 0.30
)

# Global custom gradient + sparse wireframe
solid_xyz3d(
  H1,H2,G1,G2, a=-1, b=1, plot=TRUE, mode="both",
  colorscales = c("white","#2a9d8f"),
  opacities   = 0.25,
  wire_step   = 12,
  wire_line   = list(color="rgba(20,20,20,0.25)", width=1, dash="dot"),
  edge_line   = list(color="rgba(30,30,30,0.35)", width=1),
  slice = list(x = 0, z = 0.6),
  slice_mode = "surface",
  slice_colorscales = list(x = "#ffb703", y = "#9b5de5", z = c("white", "#2a9d8f")),
  slice_opacity = 0.6
)
\dontshow{\}}

}
