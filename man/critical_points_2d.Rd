% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/critical_points_2d.R
\name{critical_points_2d}
\alias{critical_points_2d}
\title{Critical points in 2D via gradient and Hessian}
\usage{
critical_points_2d(
  f,
  xlim,
  ylim,
  start_n = c(7L, 7L),
  n_rand = 40L,
  h = NULL,
  tol_grad = 1e-06,
  tol_merge = 0.001,
  tol_eig = 1e-06,
  maxit = 200,
  optim_method = c("BFGS", "Nelder-Mead"),
  plot = TRUE,
  grid_plot = c(60L, 60L),
  surface_colorscale = "YlGnBu",
  surface_opacity = 0.85,
  cp_colors = list(minimum = "#2ca02c", maximum = "#d62728", saddle = "#1f77b4", flat =
    "#ff7f0e"),
  cp_size = 6,
  scene = list(aspectmode = "data", xaxis = list(title = "x"), yaxis = list(title = "y"),
    zaxis = list(title = "f(x,y)"))
)
}
\arguments{
\item{f}{Function \code{f(x,y)} returning numeric scalar.}

\item{xlim, ylim}{Numeric length-2 vectors, domain limits.}

\item{start_n}{Integer; number of regular starting points per axis.}

\item{n_rand}{Integer; extra random starts.}

\item{h}{Numeric step for finite differences.}

\item{tol_grad, tol_merge, tol_eig}{Numeric tolerances.}

\item{maxit}{Integer; max iterations per start.}

\item{optim_method}{Character; e.g. \code{"BFGS"} or \code{"CG"}.}

\item{plot}{Logical; draw surface and points.}

\item{grid_plot}{Integer; grid resolution for plotting.}

\item{surface_colorscale}{Character; Plotly colorscale.}

\item{surface_opacity}{Numeric in \eqn{[0,1]}.}

\item{cp_colors}{Named vector for point colors.}

\item{cp_size}{Numeric; point size.}

\item{scene}{List; Plotly 3D scene options.}
}
\value{
Tibble/data.frame with columns (x, y, f, type, ...).
}
\description{
Finds stationary points of \eqn{f(x,y)} over a given domain using grid starts
and local refinement, and classifies them by Hessian eigenvalues.
}
