% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/curl3d.R
\name{curl3d}
\alias{curl3d}
\title{Numerical curl of a 3D vector field}
\usage{
curl3d(F, x, y, z, h = NULL, tval = 0, method = c("central"))
}
\arguments{
\item{F}{Field function: \code{function(x,y,z)} or \code{function(x,y,z,t)} returning
a numeric vector \code{c(Fx, Fy, Fz)}.}

\item{x, y, z}{Coordinates of the evaluation point.}

\item{h}{Finite-difference step size(s). One of:
\itemize{
\item Scalar (same step for \eqn{x,y,z});
\item Numeric vector of length 3 \code{c(hx, hy, hz)};
\item \code{NULL} (default): chosen as \code{1e-4 * (1 + abs(coord))} per axis.
}}

\item{tval}{Time value if \code{F} depends on \code{t}. Default \code{0}.}

\item{method}{Differencing scheme. Currently \code{"central"} (2nd order).}
}
\value{
Named numeric vector of length 3 with the curl components:
\code{c(omega_x, omega_y, omega_z)}.
}
\description{
Computes the curl \eqn{\nabla \times \mathbf F} of a vector field
\eqn{\mathbf F(x,y,z)} (or \eqn{\mathbf F(x,y,z,t)}) at a given point using
secondâ€“order \strong{central finite differences}.
}
\details{
For \eqn{\mathbf F=(F_x,F_y,F_z)}, the curl is
\deqn{
\nabla \times \mathbf F =
\left(
  \frac{\partial F_z}{\partial y} - \frac{\partial F_y}{\partial z},\;
  \frac{\partial F_x}{\partial z} - \frac{\partial F_z}{\partial x},\;
  \frac{\partial F_y}{\partial x} - \frac{\partial F_x}{\partial y}
\right).
}

If \code{F} accepts a time argument \code{t}, the curl is evaluated at a fixed time
\code{tval}, i.e., \eqn{\nabla\times \mathbf F(\cdot,\cdot,\cdot,t=\texttt{tval})}.
}
\examples{
# Example 1: F(x,y,z) = (-y, x, 0.6)  => curl = (0, 0, 2)
F1 <- function(x,y,z) c(-y, x, 0.6)
curl3d(F1, x = 0.1, y = -0.3, z = 2)  # ~ c(0, 0, 2)

# Example 2 (with t): F(x,y,z,t) = (-y, x + t, z)
# curl = (0, 0, 2) (independent of t)
F2 <- function(x,y,z,t) c(-y, x + t, z)
curl3d(F2, x = 1, y = 2, z = 3, tval = 5)

# Tip: for highly varying fields, try smaller steps:
curl3d(F1, x=1, y=1, z=1, h = 1e-5)

}
