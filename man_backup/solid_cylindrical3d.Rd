% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/solid_cylindrical3d.R
\name{solid_cylindrical3d}
\alias{solid_cylindrical3d}
\title{Cylindrical solid defined by radial and vertical bounds (with optional plot)}
\usage{
solid_cylindrical3d(
  R1,
  R2,
  Z1,
  Z2,
  th_min,
  th_max,
  plot = TRUE,
  n_theta = 160,
  n_u = 70,
  n_v = 70,
  mode = c("faces", "wireframe", "both"),
  colorscale = "Blues",
  opacity = 0.35,
  show_surface_grid = TRUE,
  surface_grid_color = "rgba(60,80,200,0.25)",
  surface_grid_width = 1,
  edge_line = list(color = "black", width = 2),
  wire_line = list(color = "rgba(0,0,0,0.35)", width = 1),
  scene = list(aspectmode = "data", xaxis = list(title = "x"), yaxis = list(title = "y"),
    zaxis = list(title = "z")),
  bg = list(paper = "white", plot = "white"),
  compute_volume = FALSE,
  vol_method = c("adaptive", "grid"),
  ntheta_vol = 400,
  nr_vol = 400
)
}
\arguments{
\item{R1, R2}{Functions \code{function(theta)} giving the inner/outer radius bounds.}

\item{Z1, Z2}{Functions \code{function(r,theta)} giving the lower/upper \code{z} bounds.}

\item{th_min, th_max}{Angular limits (numeric scalars) with \code{th_max > th_min}.}

\item{plot}{Logical. If \code{TRUE}, plot with \pkg{plotly}.}

\item{n_theta, n_u, n_v}{Mesh resolution in \code{theta} (angle), \code{u} (radial blend), \code{v} (vertical blend).}

\item{mode}{\code{"faces"}, \code{"wireframe"} or \code{"both"}.}

\item{colorscale}{Plotly colorscale (name, single color, or vector of colors) for the surface.}

\item{opacity}{Surface opacity (0-1).}

\item{show_surface_grid}{Logical. Draw a grid on the surface.}

\item{surface_grid_color, surface_grid_width}{Grid aesthetics.}

\item{edge_line, wire_line}{Line styles for edges and wireframe.}

\item{scene, bg}{Plotly 3D scene and background colors.}

\item{compute_volume}{Logical. If \code{TRUE}, compute the volume.}

\item{vol_method}{\code{"adaptive"} (nested \code{stats::integrate}) or \code{"grid"} (trapezoidal on regular mesh).}

\item{ntheta_vol, nr_vol}{Mesh sizes for \code{vol_method = "grid"}.}
}
\value{
A list with:
\itemize{
\item \code{theta_seq}, \code{u_seq}, \code{v_seq}: the parameter sequences used,
\item \code{fig}: a \pkg{plotly} object if \code{plot = TRUE}, otherwise \code{NULL},
\item \code{volume}: \code{NULL} or a list with \code{estimate} and metadata when \code{compute_volume = TRUE}.
}
}
\description{
Builds (and optionally plots with \pkg{plotly}) the solid
\deqn{\{(x,y,z):\ \theta \in [\theta_{\min}, \theta_{\max}],\ r \in [R_1(\theta), R_2(\theta)],\ z \in [Z_1(r,\theta), Z_2(r,\theta)]\}.}
Rendering is done by sampling a curvilinear grid in \eqn{(\theta, u, v)},
where \eqn{u,v \in [0,1]} linearly blend the inner/outer radius and lower/upper \eqn{z}, respectively.
}
\details{
The volume is computed as
\deqn{\int_{\theta_{\min}}^{\theta_{\max}} \int_{R_1(\theta)}^{R_2(\theta)} \int_{Z_1(r,\theta)}^{Z_2(r,\theta)} r\,dz\,dr\,d\theta.}
}
\examples{
\dontrun{
# Example: a quarter-twisted "cup": R in [0, 1+0.2*cos(theta)], z in [0, 1 + 0.5*r]
R1 <- function(theta) 0
R2 <- function(theta) 1 + 0.2*cos(theta)
Z1 <- function(r,theta) 0
Z2 <- function(r,theta) 1 + 0.5*r
solid_cylindrical3d(
  R1, R2, Z1, Z2, th_min = 0, th_max = pi/2,
  plot = TRUE, mode = "both",
  colorscale = c("white", "#2a9d8f"), opacity = 0.35, show_surface_grid = TRUE,
  compute_volume = TRUE, vol_method = "adaptive"
)$volume
}
}
