% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/critical_points_2d.R
\name{critical_points_2d}
\alias{critical_points_2d}
\title{Critical points of a 2D scalar field (unconstrained) + 3D plot}
\usage{
critical_points_2d(
  f,
  xlim,
  ylim,
  start_n = c(7L, 7L),
  n_rand = 40L,
  h = NULL,
  tol_grad = 1e-06,
  tol_merge = 0.001,
  tol_eig = 1e-06,
  maxit = 200,
  optim_method = c("BFGS", "Nelder-Mead"),
  plot = TRUE,
  grid_plot = c(60L, 60L),
  surface_colorscale = "YlGnBu",
  surface_opacity = 0.85,
  cp_colors = list(minimum = "#2ca02c", maximum = "#d62728", saddle = "#1f77b4", flat =
    "#ff7f0e"),
  cp_size = 6,
  scene = list(aspectmode = "data", xaxis = list(title = "x"), yaxis = list(title = "y"),
    zaxis = list(title = "f(x,y)"))
)
}
\arguments{
\item{f}{\code{function(x,y)} returning a numeric scalar \eqn{f(x,y)}.}

\item{xlim, ylim}{Domain intervals as \code{c(min, max)}.}

\item{start_n}{Grid size for multi-start (for \eqn{g}): \code{c(nx, ny)}.}

\item{n_rand}{Number of additional random starts within the domain.}

\item{h}{Step(s) for finite differences. \code{NULL} (auto), a scalar, or \code{c(hx, hy)}.}

\item{tol_grad}{Threshold on \eqn{\|\nabla f\|} to accept a critical point.}

\item{tol_merge}{Euclidean distance used to merge nearby candidates.}

\item{tol_eig}{Eigenvalue tolerance to decide the sign in classification.}

\item{maxit}{Max iterations per \code{optim()} call.}

\item{optim_method}{Primary method for \code{optim()} (default \code{"BFGS"}).
If it fails, a \emph{fallback} to \code{"Nelder-Mead"} is used.}

\item{plot}{If \code{TRUE}, renders the surface and the critical points.}

\item{grid_plot}{Surface mesh density \code{c(nx, ny)} for plotting.}

\item{surface_colorscale}{Plotly colorscale name (e.g. \code{"YlGnBu"}, \code{"Viridis"}).}

\item{surface_opacity}{Surface opacity in \eqn{[0,1]}.}

\item{cp_colors}{Named list of colors for classes:
\code{list(minimum=, maximum=, saddle=, flat=)}.}

\item{cp_size}{Marker size for critical points.}

\item{scene}{Plotly scene list (axes titles, aspect, etc.).}
}
\value{
A list with:
\itemize{
\item \code{critical_points}: \code{data.frame} with columns \code{x,y,z,grad_norm,class},
\item \code{fig}: a \pkg{plotly} object if \code{plot=TRUE}, otherwise \code{NULL}.
}
}
\description{
Finds \strong{critical points} of a scalar field \eqn{f(x,y)} by solving
\eqn{\nabla f(x,y)=0} numerically (multi-start minimization of
\eqn{g(x,y)=\|\nabla f(x,y)\|^2}), \strong{classifies} them via the Hessian
(as \emph{minimum}, \emph{maximum}, \emph{saddle}, or \emph{flat/indeterminate}),
and draws a \strong{3D plot} of the surface with critical points highlighted.
}
\details{
Central finite differences (order 2) are used for gradients and the Hessian.
Nearby candidates are \emph{merged} using \code{tol_merge}.
}
\examples{
\dontshow{if (interactive()) \{}
# 1) Single minimum at (0,0): f = x^2 + y^2
f1 <- function(x,y) x^2 + y^2
out1 <- critical_points_2d(f1, xlim=c(-2,2), ylim=c(-2,2))
out1$critical_points

# 2) Monkey saddle at (0,0): f = x^3 - 3*x*y^2
f2 <- function(x,y) x^3 - 3*x*y^2
out2 <- critical_points_2d(f2, xlim=c(-2,2), ylim=c(-2,2), grid_plot=c(80,80))

# 3) Multiple minima and maxima
f3 <- function(x,y) x^4 + y^4 - 2*(x^2 + y^2)
out3 <- critical_points_2d(f3, xlim=c(-2,2), ylim=c(-2,2))
\dontshow{\}}

}
